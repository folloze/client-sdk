import{y as n}from"./chunk.DUABR7O6.js";import{a as i}from"./chunk.TWUQ6LLZ.js";import{a as m}from"./chunk.KVVA2TM3.js";var p=class{constructor(a){this.fetchService=a,this.fetcher=a.fetcher}publishLiveBoard(a,o=!0){return new Promise((t,e)=>{this.fetcher.post(`/api/v1/boards/${a}/publish`,{with_go_online:o}).then(r=>{t(r.data)}).catch(r=>{console.error("could not publish live board",r),e(r)})})}getImageGallery(a){return new Promise((o,t)=>{this.fetcher.get("/api/v1/image_gallery",{params:m({},n(a))}).then(e=>{o(e.data)}).catch(e=>{console.error("could not get image gallery",e),t(e)})})}uploadSelectedImage(a){return new Promise((o,t)=>{this.fetcher.post("/api/v1/third_party_images",m({},n(a))).then(e=>{o(e.data)}).catch(e=>{console.error("could not upload image",e),t(e)})})}getBannerImageGallery(){return this.getImageGallery({organizationId:this.fetchService.organizationId,bankCategory:"banners",type:"campaign"})}getMobileImageGallery(){return this.getImageGallery({organizationId:this.fetchService.organizationId,bankCategory:"mobile_banners",type:"campaign"})}getIconsImageGallery(){return this.getImageGallery({organizationId:this.fetchService.organizationId,bankCategory:"icons",type:"icon"})}getLogosImageGallery(){return this.getImageGallery({organizationId:this.fetchService.organizationId,bankCategory:"logos",type:"campaign"})}searchImageGallery(a,o,t="bing"){return this.getImageGallery({type:t,query:a,count:o||20})}uploadImage(a){return this.uploadSelectedImage(a)}getImageUploadUrl(a){return new Promise((o,t)=>{this.fetcher.post("/api/v1/upload_urls",{type:a}).then(e=>{o(e.data)}).catch(e=>{console.error("could not get upload url",e),t(e)})})}getForms(a){return new Promise((o,t)=>{this.fetcher.get(`api/v1/boards/${a}/forms`).then(e=>o(e.data)).catch(e=>{console.error("could not get forms",e),t(e)})})}createForm(a,o){return new Promise((t,e)=>{this.fetcher.post(`api/v1/boards/${a}/forms`,n(o)).then(r=>t(r.data)).catch(r=>{console.error("could not save form",r),e(r)})})}updateForm(a,o,t){return new Promise((e,r)=>{this.fetcher.put(`api/v1/boards/${a}/forms/${o}`,n(t)).then(s=>e(s.data)).catch(s=>{console.error("could not save form",s),r(s)})})}getCampaignElements(a,o){return new Promise((t,e)=>{this.fetcher.get(`prism/${a}/campaign_elements`,{params:{element_type:o}}).then(r=>t(r.data)).catch(r=>{console.error("could not get campaign elements",r),e(r)})})}getFooters(a){return this.getCampaignElements(a,i.footer)}getPrivacyMessages(a){return this.getCampaignElements(a,i.privacy_message)}getFormPrivacyMessages(a){return this.getCampaignElements(a,i.form_privacy_message)}getPrivacySettings(a){return new Promise((o,t)=>{this.fetcher.get(`/api/v1/organizations/${a}/settings/privacy`).then(e=>o(e.data)).catch(e=>{console.error("could not get privacy settings",e),t(e)})})}getEmailTemplates(a){return new Promise((o,t)=>{this.fetcher.get(`api/v1/boards/${a}/email_templates`).then(e=>o(e.data)).catch(e=>{console.error("could not get email templates",e),t(e)})})}getBoardHasPersonalization(a,o){return new Promise((t,e)=>{this.fetcher.get(`api/v1/organizations/${a}/settings/personalizations`,{params:{board_id:o}}).then(r=>t(r.data)).catch(r=>{console.error("could not get personalization setting",r),e(r)})})}getFeatureSettings(a){return new Promise((o,t)=>{this.fetcher.get(`/api/v1/organizations/${a}/settings/features`).then(e=>o(e.data)).catch(e=>{console.error("could not get feature settings",e),t(e)})})}getPersonalization(a){return new Promise((o,t)=>{this.fetcher.get(`/prism/${a}/personalization`).then(e=>o(e.data)).catch(e=>{console.error("could not get personalization",e),t(e)})})}savePersonalization(a,o){return new Promise((t,e)=>{this.fetcher.put(`/prism/${a}/personalization`,o).then(r=>t(r.data)).catch(r=>{console.error("could not save personalization",r),e(r)})})}saveLiveBoard(a,o){return new Promise((t,e)=>{this.fetcher.put(`/api/v1/boards/${a}/config`,{config:o,theme_id:null}).then(r=>t({status:r.status,data:r.data})).catch(r=>{var s,l,g;if(((s=r.response)==null?void 0:s.status)===409||((l=r.response)==null?void 0:l.status)===406){let c=((g=r.response)==null?void 0:g.status)===409?"conflict":"unacceptable";console.warn(`could not save - ${c}`),t({status:r.response.status,data:r.response.data})}else console.error("could not save liveBoard config",r),e(r)})})}getLiveBoardConfig(a){return new Promise((o,t)=>{this.fetcher.get(`/api/v1/boards/${a}/config`).then(e=>{e.data.published_hash=e.data.unpublished_config.meta.newHash,o(e.data)}).catch(e=>{console.error("could not save get liveBoard config",e),t(e)})})}searchBoardContacts(a,o){return new Promise((t,e)=>{this.fetcher.get("/api/v1/search/board_contacts",{params:{board_id:a,query:o}}).then(r=>t(r.data)).catch(r=>{console.error("could not get board contacts",r),e(r)})})}getMergeTagsByBoard(a,o){return new Promise((t,e)=>{this.fetcher.get(`/api/v1/boards/${a}/merge_tags`,{params:{context_type:o}}).then(r=>t(r.data)).catch(r=>{console.error("could not get board merge tags",r),e(r)})})}getMergeTagValues(a,o){return new Promise((t,e)=>{this.fetcher.get(`/api/v1/merge_tags/${o}/merge_tags_lookups`,{params:{organization_id:a}}).then(r=>t(r.data)).catch(r=>{console.error("could not get merge tag values",r),e(r)})})}};export{p as a};
